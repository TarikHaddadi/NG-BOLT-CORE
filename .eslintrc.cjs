/* eslint-disable @typescript-eslint/no-var-requires */
const { readFileSync } = require('fs');

module.exports = {
  root: true,
  ignorePatterns: [
    'dist/',
    'out-tsc/',
    'coverage/',
    '**/*.d.ts',
    // generated by ng-packagr
    '**/*.ngtypecheck.ts',
    // IDE or misc
    '.husky/',
  ],
  parserOptions: {
    project: ['tsconfig.json'],
    sourceType: 'module'
  },
  overrides: [
    // TypeScript (source)
    {
      files: ['**/*.ts'],
      parser: '@typescript-eslint/parser',
      parserOptions: {
        project: ['tsconfig.json']
      },
      plugins: [
        '@typescript-eslint',
        '@angular-eslint',
        'import',
        'simple-import-sort'
      ],
      extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@angular-eslint/recommended',
        'plugin:import/recommended',
        'plugin:import/typescript',
        'plugin:@angular-eslint/template/process-inline-templates',
        'prettier'
      ],
      settings: {
        'import/resolver': {
          typescript: {
            project: 'tsconfig.json'
          }
        }
      },
      rules: {
        // --- TypeScript ---
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_', varsIgnorePattern: '^_' }],
        '@typescript-eslint/no-floating-promises': 'warn',

        // --- Angular ---
        '@angular-eslint/component-class-suffix': ['error', { suffixes: ['Component'] }],
        '@angular-eslint/directive-class-suffix': ['error', { suffixes: ['Directive'] }],
        '@angular-eslint/no-empty-lifecycle-method': 'off',
        '@angular-eslint/use-lifecycle-interface': 'off', // not needed with standalone/ivy
        '@angular-eslint/contextual-decorator': 'error',

        // --- Imports hygiene ---
        'import/no-unresolved': 'error',
        'import/no-extraneous-dependencies': ['error', { devDependencies: ['**/*.spec.ts', '**/testing/**'] }],
        'import/no-cycle': ['error', { maxDepth: 1 }],
        'import/order': 'off', // replaced by simple-import-sort

        // Sort + group imports
        'simple-import-sort/imports': ['error', {
          groups: [
            // Packages
            ['^\\u0000', '^@?\\w'],
            // @cadai scopes first
            ['^@cadai(/.*|$)'],
            // Absolute imports (if you have any)
            ['^@/'],
            // Relative
            ['^\\.'],
            // Styles
            ['^.+\\.(scss|css)$']
          ]
        }],
        'simple-import-sort/exports': 'error',

        // --- SDK specific guardrails ---
        // Encourage using public entry points, not deep files across entrypoints
        'no-restricted-imports': ['error', {
          patterns: [
            // Disallow importing deep files from another entry point directory
            {
              group: [
                'projects/core/*/*',
                '!projects/core/**/public-api',
                '!@cadai/pxs-ng-core',
                '!@cadai/pxs-ng-core/*'
              ],
              message: 'Import from published entry points only (e.g. @cadai/pxs-ng-core/<entry>).'
            }
          ]
        }]
      }
    },

    // Angular templates
    {
      files: ['**/*.html'],
      extends: ['plugin:@angular-eslint/template/recommended'],
      rules: {
        // You can enable stricter a11y here
        '@angular-eslint/template/accessible-name': 'warn'
      }
    }
  ]
};

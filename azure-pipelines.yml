# ===========================
# Azure DevOps CI/CD for @cadai/pxs-ng-core
# - CI: build & test on PRs/commits
# - CD: optional version bump + publish to Azure Artifacts
# ===========================

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - projects/core/**
      - angular.json
      - package.json
      - pnpm-lock.yaml
      - package-lock.json
      - yarn.lock

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - projects/core/**
      - angular.json
      - package.json
      - pnpm-lock.yaml
      - package-lock.json
      - yarn.lock

# ---- Parameters so you can run a manual pipeline with a chosen bump type ----
parameters:
- name: release
  displayName: Publish to Azure Artifacts?
  type: boolean
  default: false
- name: versionBump
  displayName: Version bump (used only if release=true)
  type: string
  default: 'patch'
  values:
    - 'none'
    - 'patch'
    - 'minor'
    - 'major'

variables:
  NODE_VERSION: '20.x'
  PROJECT_DIR: 'projects/core'
  DIST_DIR: 'dist/core'


stages:
# ========================= CI =========================
- stage: CI
  displayName: Build & Test
  jobs:
  - job: build_test
    displayName: Build & Test
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      persistCredentials: true  # needed if CD pushes tags

    - task: NodeTool@0
      inputs:
        versionSpec: '$(NODE_VERSION)'
      displayName: 'Use Node $(NODE_VERSION)'

    # --- Cache node_modules (works for npm, yarn, or pnpm) ---
    - task: Cache@2
      inputs:
        key: |
          npm | "$(Agent.OS)" | package-lock.json
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(Pipeline.Workspace)/.npm
      displayName: Cache npm

    - script: |
        npm ci
      displayName: 'Install root deps'

    # Optional: lint/test (uncomment if you have scripts)
     
    - script: npm run lint
      displayName: 'Lint'
    # - script: npm test -- --watch=false --browsers=ChromeHeadless
    #   displayName: 'Unit tests'

    # Build only the library entrypoint
    - script: |
        npx ng build core --configuration production
      displayName: 'Build library (ng-packagr)'

    - publish: $(DIST_DIR)
      artifact: core-dist
      displayName: 'Publish artifact: dist/core'

# ========================= CD (optional) =========================
- stage: Release
  displayName: Release to Azure Artifacts
  dependsOn: CI
  condition: and(succeeded(), eq('${{ parameters.release }}', 'true'))
  jobs:
  - job: publish
    displayName: Version & Publish
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      persistCredentials: true

    - task: NodeTool@0
      inputs:
        versionSpec: '$(NODE_VERSION)'
      displayName: 'Use Node $(NODE_VERSION)'

    - download: current
      artifact: core-dist
      displayName: 'Download core-dist artifact'

    # ----- (Optional) bump version and tag -----
    - script: |
        echo "Requested bump: ${{ parameters.versionBump }}"
        if [ "${{ parameters.versionBump }}" != "none" ]; then
          git config user.email "builds@azuredevops"
          git config user.name  "Azure Pipelines"
          # Bump version in projects/core/package.json
          npm version ${{ parameters.versionBump }} --no-git-tag-version --prefix $(PROJECT_DIR)

          # Commit the bump
          git add $(PROJECT_DIR)/package.json
          git commit -m "chore(core): version ${{ parameters.versionBump }} (CI)"
          # Create tag based on updated package.json version
          PKG_VERSION=$(node -p "require('./$(PROJECT_DIR)/package.json').version")
          git tag "core-v$PKG_VERSION"
          git push origin HEAD:$(Build.SourceBranch)
          git push origin "core-v$PKG_VERSION"
          echo "Bumped to version $PKG_VERSION"
        else
          echo "Skipping version bump (versionBump=none)"
        fi
      displayName: 'Bump version & tag (optional)'

    # Rebuild from source (ensures dist uses bumped version),
    # or repack the downloaded artifact. Rebuild is safer.
    - script: |
        npm ci
        npx ng build core --configuration production
      displayName: 'Rebuild library for release'

    # Authenticate npm to Azure Artifacts and publish
    - task: NpmAuthenticate@0
      inputs:
        workingFile: '$(PROJECT_DIR)/.npmrc'  # optional if you keep one; task will still inject auth
        customEndpoint: ''                    # leave blank if using built-in Azure Artifacts auth
        # Alternatively, set 'customEndpoint' to a service connection for external registries
      displayName: 'Authenticate to Azure Artifacts'

    - script: |
        cd $(DIST_DIR)
        # Uses publishConfig.registry in dist/core/package.json
        npm publish --ignore-scripts
      displayName: 'Publish to Azure Artifacts'

    # (Optional) create a pipeline artifact of the final dist for auditing
    - publish: $(DIST_DIR)
      artifact: core-release
      displayName: 'Publish artifact: core-release'

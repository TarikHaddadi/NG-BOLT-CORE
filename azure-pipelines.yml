trigger:
  branches:
    include: [main, master, develop]
  paths:
    include:
      - projects/core/**
      - azure-pipelines.yml
      - package.json
      - package-lock.json
      - tsconfig*.json
      - projects/**

pr:
  branches:
    include: [main, master, develop]
  paths:
    include:
      - projects/core/**

pool:
  vmImage: 'ubuntu-latest'

variables:
  NODE_VERSION: '20.x'
  PROJECT_DIR: 'projects/core'
  DIST_DIR: 'dist/core'

stages:
# ---------- Build & Test ----------
- stage: build_test
  displayName: Build & Test
  jobs:
  - job: build
    steps:
    - task: NodeTool@0
      inputs: { versionSpec: '$(NODE_VERSION)' }
      displayName: 'Use Node.js $(NODE_VERSION)'

    - script: npm ci
      displayName: 'Install dependencies'

    - script: npm run lint:ci
      displayName: 'Run ESLint (CI)'
      
    - script: npm run build:core
      displayName: 'Build library'

    - publish: $(DIST_DIR)
      artifact: pxs-ng-core
      displayName: 'Publish build artifact'

- stage: tag_on_main
  displayName: "Create git tag from package version"
  dependsOn: build_test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
    - job: tag_job
      displayName: "Tag repo with v<version>"
      steps:
        - checkout: self
          persistCredentials: true

        - task: NodeTool@0
          inputs:
            versionSpec: '20.x'
          displayName: 'Use Node.js'

        - script: |
            set -euo pipefail

            # Use the System.AccessToken for git HTTPS ops
            git config --global http.https://dev.azure.com/.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"
            git config --global user.email "build-bot@ci"
            git config --global user.name  "Build Bot"
            git config --global safe.directory $(Build.SourcesDirectory)

            PKG_PATH="projects/core/package.json"
            VERSION=$(node -p "require('./' + process.env.PKG_PATH).version")
            TAG="PXS-NG-CORE@$VERSION"

            echo "Detected version: $VERSION"
            echo "Proposed tag:    $TAG"

            # Make sure we have latest tags from origin
            git fetch --tags --force

            if git rev-parse "$TAG" >/dev/null 2>&1; then
              echo "Tag $TAG already exists. Nothing to do."
              exit 0
            fi

            git tag -a "$TAG" -m "release: $TAG"
            git push origin "$TAG"
            echo "Created and pushed tag $TAG"
          displayName: 'Create & push tag from package version'
          env:
            PKG_PATH: projects/core/package.json
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # exposed to the script
            
# ---------- Publish to Azure Artifacts ----------
- stage: publish
  displayName: Publish
  dependsOn:
    - build_test
    - tag_on_main
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
    - job: publish_job
      displayName: Publish package to Azure Artifacts
      steps:
        - download: current
          artifact: pxs-ng-core   # lands in $(Pipeline.Workspace)/pxs-ng-core

        - task: NodeTool@0
          inputs:
            versionSpec: '$(NODE_VERSION)'
          displayName: 'Use Node.js $(NODE_VERSION)'

        # Auth to Azure Artifacts (injects token into npm for this job)
        - task: NpmAuthenticate@0
          displayName: 'Authenticate to Azure Artifacts'
          # Omit workingFile unless you must update a specific .npmrc
          inputs:
            workingFile: '.npmrc'

        - script: |
            set -euo pipefail

            PKG_DIR="$(Pipeline.Workspace)/pxs-ng-core"
            PKG_JSON="$PKG_DIR/package.json"

            echo "Package directory: $PKG_DIR"
            test -f "$PKG_JSON" || { echo "package.json not found in $PKG_DIR"; exit 1; }

            # Read name/version from the built artifact
            PKG_NAME=$(node -e "console.log(require(process.env.PKG_JSON).name)")
            PKG_VER=$(node -e "console.log(require(process.env.PKG_JSON).version)")
            echo "Publishing ${PKG_NAME}@${PKG_VER}"

            # Optional: skip if this version already exists to prevent 409
            if npm view "${PKG_NAME}@${PKG_VER}" version >/dev/null 2>&1; then
              echo "Version already exists on the feed. Skipping publish."
              exit 0
            fi

            # Extra safety: disable lifecycle scripts
            npm config set ignore-scripts true

            cd "$PKG_DIR"
            npm publish --ignore-scripts
          displayName: 'Publish to Azure Artifacts'
          env:
            PKG_JSON: $(Pipeline.Workspace)/pxs-ng-core/package.json